/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package adr.main;

import static adr.main.AlcorAdrApp.logger;
import adr.serial.COMPortSettings;
import gnu.io.CommPortIdentifier;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
import org.apache.log4j.Logger;

/**
 *
 * @author yaroslav
 */
public class AlcorAdrDlg extends javax.swing.JDialog {
    static Logger logger = Logger.getLogger( AlcorAdrDlg.class);
    
    final AlcorAdrApp theApp;
    
    final PanelADC pnlADC;
    final PanelDAC pnlDAC;
    final PanelGPI pnlGPI;
    final PanelGPO pnlGPO;
    
    final LedsRefresh m_ledsRefresher;
    final public Timer tRefresh;
    
    /**
     * Creates new form alcor_adr_dlg
     */
    public AlcorAdrDlg(java.awt.Frame parent, boolean modal, AlcorAdrApp app) {
        super(parent, modal);
        initComponents();
        theApp = app;

        String strPortFromSettings = theApp.GetSettings().GetCOMPortSettings().GetPort();
        boolean bFound = false;
        
        java.util.Enumeration <CommPortIdentifier> portEnum = CommPortIdentifier.getPortIdentifiers();
        if( portEnum.hasMoreElements() == false) {
            logger.warn("getPortIdentifiers() returns empty list!");
        }
        else {
            while ( portEnum.hasMoreElements() ) {
                CommPortIdentifier portIdentifier = portEnum.nextElement();
                logger.debug( "Port found by RxTx:" + portIdentifier.getName()  +  " - " +  getPortTypeName(portIdentifier.getPortType()));
                if( strPortFromSettings.equals( portIdentifier.getName()))
                    bFound = true;
                cmbComPortName.addItem( portIdentifier.getName());
            }
        }
        
        if( bFound) {
            logger.info( "Порт из настроек (" + strPortFromSettings + ") найден в списке имеющихся портов");
            logger.info( "Выставляем его в комбобоксе");
            cmbComPortName.setSelectedItem( strPortFromSettings);
        }
        pnlGPI = new PanelGPI( app);
        panelGPI.add( pnlGPI);
        pnlGPI.setVisible( true);
        pnlGPI.setBounds( 0, 0, 250, 870);
        
        pnlGPO = new PanelGPO( app);
        panelGPO.add( pnlGPO);
        pnlGPO.setVisible( true);
        pnlGPO.setBounds( 0, 0, 310, 870);
        
        pnlADC = new PanelADC( app);
        panelADC.add( pnlADC);
        pnlADC.setVisible( true);
        pnlADC.setBounds( 0, 0, 250, 870);
        
        pnlDAC = new PanelDAC( app);
        panelDAC.add( pnlDAC);
        pnlDAC.setVisible( true);
        pnlDAC.setBounds( 0, 0, 280, 870);
        
        //lblRx.setIcon( theApp.GetResources().getIconLittleGrey());
        //lblTx.setIcon( theApp.GetResources().getIconLittleGrey());
        m_ledsRefresher = new LedsRefresh( app);
        m_ledsRefresher.lightLedsStart();
        
        tRefresh = new Timer( 100, new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                boolean bEnable = ( theApp.GetConnectionState() == AlcorAdrConstants.CONNECT_CONNECTED);
                btnFWversion.setEnabled( bEnable);
                btnAddresses.setEnabled( bEnable);
                chkLoopReq.setEnabled(   bEnable);
            }
            
        });
        tRefresh.start();
    }

    public String getPortTypeName ( int portType )
    {
        switch ( portType )
        {
            case CommPortIdentifier.PORT_I2C:       return "I2C";
            case CommPortIdentifier.PORT_PARALLEL:  return "Parallel";
            case CommPortIdentifier.PORT_RAW:       return "Raw";
            case CommPortIdentifier.PORT_RS485:     return "RS485";
            case CommPortIdentifier.PORT_SERIAL:    return "Serial";
            default:                                return "unknown type";
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblComPort = new javax.swing.JLabel();
        cmbComPortName = new javax.swing.JComboBox();
        btnAddresses = new javax.swing.JButton();
        lblTx = new javax.swing.JLabel();
        lblRx = new javax.swing.JLabel();
        panelGPO = new javax.swing.JPanel();
        panelGPI = new javax.swing.JPanel();
        panelDAC = new javax.swing.JPanel();
        panelADC = new javax.swing.JPanel();
        btnFWversion = new javax.swing.JButton();
        btnConnect = new javax.swing.JButton();
        btnDisconnect = new javax.swing.JButton();
        lblFWvalue = new javax.swing.JLabel();
        chkLoopReq = new javax.swing.JCheckBox();
        btnExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("УСПД, v 2017.03.06, (С) ООО НПО Алькор Лаборатории");
        setMaximumSize(new java.awt.Dimension(1150, 970));
        setMinimumSize(new java.awt.Dimension(1150, 970));
        setResizable(false);
        getContentPane().setLayout(null);

        lblComPort.setText("COM-порт");
        getContentPane().add(lblComPort);
        lblComPort.setBounds(10, 10, 80, 30);

        getContentPane().add(cmbComPortName);
        cmbComPortName.setBounds(90, 10, 160, 30);

        btnAddresses.setText("Адреса");
        btnAddresses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddressesActionPerformed(evt);
            }
        });
        getContentPane().add(btnAddresses);
        btnAddresses.setBounds(880, 10, 120, 30);

        lblTx.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTx.setText("Tx");
        lblTx.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(210, 210, 210)));
        getContentPane().add(lblTx);
        lblTx.setBounds(300, 10, 40, 30);

        lblRx.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblRx.setText("Rx");
        lblRx.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(210, 210, 210)));
        getContentPane().add(lblRx);
        lblRx.setBounds(260, 10, 40, 30);

        panelGPO.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(210, 210, 210)));
        panelGPO.setMaximumSize(new java.awt.Dimension(250, 900));
        panelGPO.setMinimumSize(new java.awt.Dimension(250, 900));
        panelGPO.setPreferredSize(new java.awt.Dimension(250, 900));
        panelGPO.setLayout(null);
        getContentPane().add(panelGPO);
        panelGPO.setBounds(270, 50, 310, 900);

        panelGPI.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(210, 210, 210)));
        panelGPI.setMaximumSize(new java.awt.Dimension(250, 900));
        panelGPI.setMinimumSize(new java.awt.Dimension(250, 900));
        panelGPI.setPreferredSize(new java.awt.Dimension(250, 900));
        panelGPI.setLayout(null);
        getContentPane().add(panelGPI);
        panelGPI.setBounds(10, 50, 250, 900);

        panelDAC.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(210, 210, 210)));
        panelDAC.setMaximumSize(new java.awt.Dimension(280, 900));
        panelDAC.setMinimumSize(new java.awt.Dimension(280, 900));
        panelDAC.setPreferredSize(new java.awt.Dimension(280, 900));
        panelDAC.setLayout(null);
        getContentPane().add(panelDAC);
        panelDAC.setBounds(850, 50, 280, 900);

        panelADC.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(210, 210, 210)));
        panelADC.setMaximumSize(new java.awt.Dimension(250, 900));
        panelADC.setMinimumSize(new java.awt.Dimension(250, 900));
        panelADC.setLayout(null);
        getContentPane().add(panelADC);
        panelADC.setBounds(590, 50, 250, 900);

        btnFWversion.setText("ПО прибора:");
        btnFWversion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFWversionActionPerformed(evt);
            }
        });
        getContentPane().add(btnFWversion);
        btnFWversion.setBounds(610, 10, 120, 30);

        btnConnect.setText("Соединить");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });
        getContentPane().add(btnConnect);
        btnConnect.setBounds(350, 10, 120, 30);

        btnDisconnect.setText("Разъединить");
        btnDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisconnectActionPerformed(evt);
            }
        });
        getContentPane().add(btnDisconnect);
        btnDisconnect.setBounds(480, 10, 120, 30);

        lblFWvalue.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFWvalue.setText("-");
        lblFWvalue.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(210, 210, 210)));
        getContentPane().add(lblFWvalue);
        lblFWvalue.setBounds(730, 10, 80, 30);
        getContentPane().add(chkLoopReq);
        chkLoopReq.setBounds(850, 10, 30, 30);

        btnExit.setText("Выход");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        getContentPane().add(btnExit);
        btnExit.setBounds(1010, 10, 120, 30);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddressesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddressesActionPerformed
        theApp.GetRxTx().AddCommandToQueue( theApp.GetDevCommon().cmdGetAddresses(), theApp.GetDevCommon());
    }//GEN-LAST:event_btnAddressesActionPerformed
    
    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        try {
            if( theApp.GetRxTx() != null) {
                theApp.GetRxTx().disconnect( theApp.GetSettings().GetCOMPortSettings());
            }
        } catch( Exception ex) {
            logger.error("Exception on disconnect", ex);
        }
        
        tRefresh.stop();
        pnlADC.tRefreshStates.stop();
        pnlADC.tRefreshValues.stop();
        pnlADC.tPolling.stop();
        
        pnlDAC.tRefreshStates.stop();
        pnlDAC.tRefreshValues.stop();
        pnlDAC.tPolling.stop();
        
        pnlGPI.tRefreshStates.stop();
        pnlGPI.tRefreshValues.stop();
        pnlGPI.tPolling.stop();
        
        pnlGPO.tRefreshStates.stop();
        pnlGPO.tRefreshValues.stop();
        pnlGPO.tPolling.stop();
        
        m_ledsRefresher.lightLedsStop();
        
        String strComPort = ( String) cmbComPortName.getSelectedItem();
        logger.info( "Сохраняем текущий выбранный порт " + strComPort);
        COMPortSettings sett = theApp.GetSettings().GetCOMPortSettings();
        sett.SetPort( strComPort);
        theApp.GetSettings().SaveSettings();
        
        dispose();
    }//GEN-LAST:event_btnExitActionPerformed
    
    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        lblFWvalue.setText( "-");
        theApp.openPort();
        
    }//GEN-LAST:event_btnConnectActionPerformed

    private void btnDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisconnectActionPerformed
        lblFWvalue.setText( "-");
        
        theApp.GetDevADC().Init();
        theApp.GetDevDAC().Init();
        theApp.GetDevGPI().Init();
        theApp.GetDevGPO().Init();
        
        if( theApp.GetRxTx() != null)
            theApp.closePort();
    }//GEN-LAST:event_btnDisconnectActionPerformed

    private void btnFWversionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFWversionActionPerformed
        theApp.GetRxTx().AddCommandToQueue( theApp.GetDevCommon().cmdGetFirmware(), theApp.GetDevCommon());
    }//GEN-LAST:event_btnFWversionActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddresses;
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnDisconnect;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnFWversion;
    private javax.swing.JCheckBox chkLoopReq;
    public javax.swing.JComboBox cmbComPortName;
    private javax.swing.JLabel lblComPort;
    public javax.swing.JLabel lblFWvalue;
    public javax.swing.JLabel lblRx;
    public javax.swing.JLabel lblTx;
    private javax.swing.JPanel panelADC;
    private javax.swing.JPanel panelDAC;
    private javax.swing.JPanel panelGPI;
    private javax.swing.JPanel panelGPO;
    // End of variables declaration//GEN-END:variables
}
